(module gben.libs.json)

(require "lengine-code/stdlib.lg")
(require "lengine-code/collections.lg")

;;; Finally! reached to JSON related library

;;; Below is actually, "Reduce" operation.
(fn join-string (strs delim)
   (fold (tail strs) (head strs) (^ (acc next) (format "%s%s%s" [acc delim next]))))

;;; Make str -> "str"
(fn with-double-quotes (s) (format "\"%s\"" [s]))

(fn to-json-object (obj to-json)
                   (let ((ks (keys obj))
                         (key-values (loop for k in ks
                                           (let ((value (k obj))
                                                 (object-key (format "\"%s\":" [(get k)])))
                                                (+ object-key (to-json value))))))
                         (format "{%s}" [(join-string (seq key-values) ",")])))

(fn escape (stream)
    (fold stream "" (^ (ret ch)
        (case ((= ch #\") (+ ret "\\\""))
              ((= ch #\Return) (+ ret "\\r"))
              ((= ch #\Linefeed) (+ ret "\\n"))
              default (+ ret ch)))))

;;; Actual logics
(export to-json (^ (obj)
            (case ((bool? obj) (str obj))
                  ((char? obj) (with-double-quotes (str obj)))
                  ((int? obj) (str obj))
                  ((string? obj) (with-double-quotes (escape (seq obj))))
                  ((double? obj) (str obj))
                  ((seq? obj) (format "[%s]" [(join-string (map $ obj) ",")]))
                  ((object? obj) (to-json-object obj $))
                   default "null")))

(def obj {
  :id "Hello"
  :age 33
  :height 185.0
  :male true
  :logo #\,
  :arrs (seq [1 2 3 4 5])
})

(println obj)

(def result (loop for x in (=range 1 10)
                  (let ((start (now))
                        (json-str (to-json obj)))
                       [(- (now) start) json-str])))

(loop for x in result
      (let ((fmt "%dms elapsed, and got result: [%s]\n"))
           (printf fmt x)))

(def json-file-stream (file-stream "./compile-example/json-example.json"))
(def json-chs (read-through json-file-stream))

(println json-chs)

(fn parse-string (acc s)
  (if (nil? s) [acc s]
  (if (= (head s) #\") [acc (tail s)]
  ($ (+ acc (head s)) (tail s)))))

(fn to-num (num)
    (if (contains num #\.) (double num)
        (int num)))

(fn parse-number (acc s)
    (case ((nil? s) [(to-num acc) nil])
          ((contains (list ",]}) ") (head s)) [(to-num acc) s])
          default ($ (+ acc (head s)) (tail s))))

(fn parse-boolean (s)
    (if (= #\t (head s)) [true (drop 4 s)]
                         [false (drop 5 s)]))

(fn parse-null (s) [nil (drop 4 s)])

(fn parse-object (acc s pv)
    (if (nil? s) [acc s]
        (for (head s)
         when (#\}        [acc (tail s)])
              (#\,        ($ acc (tail s) pv))
              (#\Space    ($ acc (tail s) pv))
              (#\Linefeed ($ acc (tail s) pv))
              (#\"
            (let ((key-remains (parse-string "" (tail s))) ;;; ["SomeString" REMAINS]
                  (key-name (head key-remains))            ;;; "SomeString"
                  (after-key (head (tail key-remains)))
                  (remains (drop 1 after-key))             ;;; REMAINS
                  (value-remains (pv remains))
                  (value (head value-remains))
                  (e (entry (key key-name) value))
                  (remains (head (tail value-remains))))
                 ($ (+: acc e) remains pv)))
          otherwise [nil nil])))

(fn parse-array (acc s pv)
  (if (nil? s) [acc s]
    (for (head s)
      when (#\Space    ($ acc (tail s) pv))
           (#\,        ($ acc (tail s) pv))
           (#\Linefeed ($ acc (tail s) pv))
           (#\]        [acc (tail s)])
      otherwise (let ((parsed (pv s))
                      (value (head parsed))
                      (remains (head (tail parsed))))
                     ($ (+: acc value) remains pv)))))

(fn num? (ch)
  (for ch
   when (#\0 true)
        (#\1 true)
        (#\2 true)
        (#\3 true)
        (#\4 true)
        (#\5 true)
        (#\6 true)
        (#\7 true)
        (#\8 true)
        (#\9 true)
        (#\- true)
        (#\. true)
    otherwise false))

(fn parse-value (json-str)
      (if (nil? json-str) ["" json-str]
      (let ((first (head json-str)))
           (case ((= #\{ first) (parse-object {} (tail json-str) $))
                 ((= #\[ first) (parse-array (seq nil) (tail json-str) $))
                 ((= #\" first) (parse-string "" (tail json-str)))
                 ((num?  first) (parse-number "" json-str))
                 ((= #\t first) (parse-boolean json-str))
                 ((= #\f first) (parse-boolean json-str))
                 ((= #\n first) (parse-null json-str))
                 ((= #\Space first) ($ (tail json-str)))
                 ((= #\Linefeed first) ($ (tail json-str)))
                 ((= #\Return first) ($ (tail json-str)))
                 ((= #\Tab first) ($ (tail json-str)))
                 default (do (println (+ "Unknown char: " first))
                             return ["" json-str])))))

(export from-json (^ (json-str)
    (head (parse-value json-str))))

(def parsed-value (head (parse-value json-chs)))

;;; Let's see whether the parsing is done well...
(println parsed-value)
(println (:header (:menu parsed-value)))
(println (:items (:menu parsed-value)))

(def result-2 (loop for x in (=range 1 10)
                  (let ((start (now))
                        (json-obj (from-json json-chs)))
                       [(- (now) start) json-obj])))

(loop for x in result-2
      (let ((fmt "%dms elapsed, and got result: [%s]\n"))
           (printf fmt x)))

(def json-str (to-json obj))
(def re-obj (from-json json-str))

(println json-str)
(println re-obj)
