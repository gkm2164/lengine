(module gben.libs.Module)

(fn map (f xs)
        (loop for x in xs
              (f x)))

(export map (^ (f xs)
               (loop for x in xs
                     (f x))))

(fn split-at-loop (p xs l r)
                  (if (nil? xs) (cons l (cons r nil))
                      (let ((h (head xs))
                            (t (tail xs)))
                           (if (not (p h))
                               ($ p t (cons h l) r)
                               (cons l (cons t nil))))))

(fn split-at (p xs)
             (split-at-loop p xs nil nil))

(fn split-real (chs delim)
    (if (nil? chs)
        nil
        (let ((delim-check (^ (ch) (= ch delim)))
              (splitted (split-at delim-check chs))
              (first (head splitted))
              (last (head (tail splitted))))
             (cons first ($ last delim)))))

(fn to-string (xs)
    (fold xs "" +))

(export to-string)

(export fold-right (^ (xs init f)
                      (fold xs
                            init
                            (^ (acc elem)
                               (f elem acc)))))

(export reverse (^ (xs) (fold xs (nil> xs) +:)))

(export split (^ (s delim)
              (reverse (map (^ (x) (to-string (reverse x)))
                       (split-real (list s) delim)))))

(export compose (^ (f g)
                   (^ (x) (f (g x)))))

(export fact (^ (n)
                (if (> n 1)
                    (* n ($ (- n 1)))
                    1)))

(fn append (xs elem)
           (if (nil? xs)
               (cons elem nil)
               ($ (tail xs) elem)))
(export append)

(export reduce (^ (xs f)
    (fold xs (nil> xs) f)))

(export filter
    (^ (xs p)
       (reduce xs (^ (acc elem)
                     (if (p elem) (+: acc elem) acc)))))
