(module process-membrane-2)

(import std.split)
(import std.split-at)
(import std.map)
(import std.filter)
(import std.filter-not)
(import std.file-stream)

(fn n-th (n xs)
    (if (= 0 n) (head xs)
        (n-th (- n 1) (tail xs))))

(fn split-at (xs delim)
    (^((acc xs)
      (case (('nil? xs) (seq [(nil> xs) (nil> xs)]))
            ((= (head xs) delim) (seq [acc (tail xs)]))
            default ($ (+: acc (head xs)) (tail xs))))
    (nil> xs) xs))

(fn line-stream (char-stream)
    #(if ('nil? char-stream) 'nil
         (let ((got (split-at char-stream #\Linefeed))
                (value (n-th 0 got))
                (remains (n-th 1 got)))
               ('cons (fold value "" +) (line-stream remains)))))

;;; Read file in Sequence type
(def fs (file-stream "./102521_membrane_GC_cell_lines.csv"))
(println (take 10 fs))
(def file-sequence (stream (line-stream fs)))
(println (take 10 file-sequence))

(fn head-values-unresolved (line-stream)
    #(if ('nil? line-stream) 'nil
         (let ((line (head line-stream))
               (value (head (split line #\,))))
              ('cons value (head-values-unresolved (tail line-stream))))))

(def head-values (stream (head-values-unresolved file-sequence)))
(println head-values)

(fn parse-double? (x)
    (try (do (double x) return true)
     (recover e false)))

(println "step 1")
(fn filter-stream (p xs)
    (case (('unresolved? xs) (stream #(filter-stream p (xs))))
          (('nil? xs) xs)
          ((p (head xs)) ('cons (head xs) (filter-stream p (tail xs))))
          default (filter-stream p (tail xs))))

(fn map-stream (f xs)
    (case (('unresolved? xs) (stream #(map-stream f (xs))))
          (('nil? xs) (nil> xs))
          default ('cons (f (head xs)) (map-stream f (tail xs)))))

(def filtered-head-values (filter-stream parse-double? head-values))

(println (take 10 filtered-head-values))

(println "step 2")

(def all-double (map-stream double filtered-head-values))

(println (take 10 all-double))

(println "step 3")
(println all-double)

(fn non-nan? (x) (not (nan? x)))

(def numbers (filter-stream non-nan? all-double))

(println (take 10 numbers))

(println (len numbers))

(def sum (fold numbers 0.0 +))
(def length (fold numbers 0 ^((acc e) (+ acc 1))))
(println length)
(def avg (/ sum length))

(println sum)
(println avg)
