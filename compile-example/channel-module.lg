(module gben.concurrency.channel-module)

(require "collections")

(println "Started channel")

(def channel (chan))

(fn producer (n)
    (if (<= n 0)
        (do (close channel)
            return nil)
        (do (println "Send message")
            (send channel "Hello")
            (wait 200)
            return ($ (- n 1)))))

(fn consumer ()
    (do return (let ((message (receive channel)))
        (if (nil? message)
              (do (println "No message found")
                  return nil)
              (do (println message)
                  return ($))))))

(println "Started producer")
(def sender (async ^(() (producer 10))))
(println "Started consumer")
(def receiver (async consumer))

(await sender)
(await receiver)
(println "Receiving finished since the channel was closed")

(exit 0)
