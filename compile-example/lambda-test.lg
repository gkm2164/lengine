(module gben.tests.lambda-test)

(import gben.libs.module.map)
(import gben.libs.math.fact)
(import gben.libs.module.compose)

(def f ^((x y) (+ x y)))

(def f-currying ^((x) ^((y) (+ x y))))

(println f)
(println (f 3 5))

(println 3)

(def curried (f-currying 3))

(println (curried 5))

(def m-f ^((x) (+ x 1)))

(println (map m-f [1 2 3 4 5]))

(def v 9)

(def f-3depth ^((x) ^((y) ^((z) (+ (+ (+ x y) z) v)))))

(assert-equals "Should be same as" (((f-3depth 1) 2) 3) 15)

(assert-equals "should 120 for 5 factorial" (fact 5) 120)

(fn f (x) (+ x "F"))
(fn g (x) (+ x "G"))
(fn h (x) (+ x "H"))
(fn . (f g) (compose f g))
(fn ... (fs) (fold fs ^((x) x) .))
(println ((. (. f g) h) "Text"))
(println ((... [f g h]) "Another"))

(println (fold ["a" "B" "C" "d"] (seq nil) +:))
