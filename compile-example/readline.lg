(module ReadLine)

(import gben.libs.Module.map)
;;;(import gben.libs.Module.split)
(import gben.libs.Module.to-string)
(import gben.libs.Module.filter)
(import gben.libs.Module.reverse)

(def line (read-line))
(println line)

(def trimmed (filter line (^ (ch) (/= ch #\Space))))
(println "TRIMMED")
(println trimmed)

(fn split-loop (acc buf xs delim)
               (if (= 0 (len xs))
                   (+: acc buf)
                   (let ((h (head xs))
                         (t (tail xs)))
                        (if (= h delim)
                            ($ (+: acc buf) "" t delim)
                            ($ acc (+ buf h) t delim)))))

(fn split (xs delim)
          (split-loop (seq nil) "" xs delim))

(def splitted (split trimmed #\,))
(println splitted)
(def nums (map (lambda (s) (int s)) splitted))
(def sum (fold nums 0 +))
(def avg (/ (double sum) (len nums)))

(println sum)
(println avg)
