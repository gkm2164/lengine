(module macro-test)

(require "collections")

(defmacro abc-macro (x y)
    (x y))

(defmacro if' (cond then-clause ,else else-clause)
    (if cond then-clause else-clause))

(abc-macro println 30)

(def x 10)

(if' (= x 20) (println "X is 20!")
 else (println "X is not 20!"))

(defmacro for' (varname ,in' seqs body)
    (loop for varname in seqs body))

(for' x in' (range 1 10)
    (println x))

(defmacro hello (,my ,name ,is name)
    (printf "Hello, %s!\n" [name]))

(hello my name is "Gyeongmin!")

(defmacro let' (varname value body)
    (let ((varname value))
         body))

(let' x 30 (println x))

(eval '((if (= 3 3) (println "33") (println "!33"))))

(println (seq '((if (= 3 3) (println "33") (println "!33")))))

(defmacro print-fmt (fmt args*)
    (printf fmt args))

(print-fmt "Hello, %s and %s!\n" "Gyeongmin" "Yoonjung")

(defmacro adds (nums*)
    (fold nums 0 +))

(println (adds 1 2 3 4 5 6 7 8 9 10))