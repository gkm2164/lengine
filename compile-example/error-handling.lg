(module gben.tests.error-handling)

(import gben.libs.module.filter)

(println "This is error handling test!")

;;; try is to put exception handler on expected failure point
(def result (try (/ 3 0)
             (recover e (do (println (:message e))
                            (println (:type e))
                            (println (:stack-trace e))
                            return 10))))

(println "Second try on dividing by string 0")

(def result-2 (try (/ 3 "0")
               (recover e (do (println (:type e))
                              return "0"))))

(println "Put wrong type, and see what happens")

(def result-3 (try (filter "12345" 345)
               (recover e (:type e))))

(assert-equals "result should be recovered with 10" result 10)
(assert-equals "result-2 should be recovered with literal 0" result-2 "0")

(println (try (char "Something")
         (recover e (do (println (:type e))
                         return #\c))))

(def c-num #C(1 1))

(println "Shouldn't be able to inverse #C(1 1) as it will return 0 for divisor")
(println (try (:inverse c-num)
         (recover e c-num)))
(println "In that case, just will return #C(1 1)")
