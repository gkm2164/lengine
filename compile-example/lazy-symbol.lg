(module gben.tests.lazy-symbol)

(def x1 #(now))
(def x2 (now))

(wait 200)

(def x3 !(x1))

(println !(x1))
(println x2)
(println x3)

(assert "Will print first now, but, will show this time" (> !(x1) x2))

(fn lazy-test (x y)
    (+ !(x) y))

(def x !(x1))
(wait 100)
(def y !(x1))

(assert-equals "Should be equal" x y)

(fn inf-stream (n)
    ('cons n #(inf-stream (+ n 1))))

;;; 0 # 1 # 1 # 2 # 3 # 5 #

(fn fib-stream (this next)
    ('cons this #(fib-stream next (+ this next))))

(fn fact-stream (n acc)
    ('cons acc #(fact-stream (+ n 1) (* acc n))))

(fn inf-take (n xs)
    (case ((= n 0) nil)
          ((nil? xs) nil)
          default (let ((h (head xs))
                        (t (tail xs)))
                       (cons h ($ (- n 1) t)))))

(def fibs (fib-stream 0 1))

(def facts (fact-stream 1 1))

(println (inf-take 20 fibs))

;;; Show until resolved values
(println fibs)

(println (inf-take 10 (inf-stream 0)))

(println (inf-take 15 facts))

(println facts)

(import std.filter)

(fn filter-stream (p xs)
    (case (('unresolved? xs) (stream #(filter-stream p (xs))))
          (('nil? xs) xs)
          ((p (head xs)) ('cons (head xs) (filter-stream p (tail xs))))
          default (filter-stream p (tail xs))))

(fn map-stream (f xs)
    (case (('unresolved? xs) (stream #(map-stream f (xs))))
          (('nil? xs) (nil> xs))
          default ('cons (f (head xs)) (map-stream f (tail xs)))))

(println (take 100 (map-stream ^((x) (+ x 10)) (filter-stream ^((x) (< x 100)) fibs))))
