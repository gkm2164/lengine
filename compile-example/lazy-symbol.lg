(module gben.tests.LazySymbolModule)

(def x1 #(now))
(def x2 (now))

(wait 200)

(def x3 (force x1))

(println (force x1))
(println x2)
(println x3)

(assert "Will print first now, but, will show this time" (> (force x1) x2))

(fn lazy-test (x y)
    (+ (force x) y))

(def x (force x1))
(wait 100)
(def y (force x1))

(assert-equals "Should be equal" x y)

(fn inf-stream (n)
    ('cons n #(inf-stream (+ n 1))))

;;; 0 # 1 # 1 # 2 # 3 # 5 #

(fn fib-stream (this next)
    ('cons this #(fib-stream next (+ this next))))

(fn inf-take (n xs)
    (case ((= n 0) nil)
          (('nil? xs) nil)
          (('cons? xs) (cons (head xs) (inf-take (- n 1) (tail xs))))
          default (let ((forced (force xs))
                        (h (head forced))
                        (t (head (tail forced))))
                       (cons h (inf-take (- n 1) t)))))

(println (inf-take 20 (fib-stream 0 1)))

(println (inf-take 10 (inf-stream 0)))

