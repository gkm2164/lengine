(module gben.tests.LazySymbolModule)

(def x1 (lazy (now)))
(def x2 (now))

(wait 200)

(def x3 (force x1))

(println (force x1))
(println x2)
(println x3)

(assert "Will print first now, but, will show this time" (> (force x1) x2))

(fn lazy-test (x y)
    (+ (force x) y))

(def x (force x1))
(wait 100)
(def y (force x1))

(assert-equals "Should be equal" x y)

(fn lazy-cons (x xs)
    (lazy (cons x (cons (force xs) nil))))


(fn inf-stream (n)
    (lazy-cons n (lazy (inf-stream (+ n 1)))))

(fn inf-take (n xs)
    (case ((= n 0) nil)
          default (let ((forced (force xs))
                        (h (head forced))
                        (t (head (tail forced))))
                       (cons h (inf-take (- n 1) t)))))


(println (inf-take 10 (inf-stream 0)))