(module std)

(import collections.>+)
(import collections.+<)

(export take ^((n xs)
    (^((acc n xs)
       (case ((nil? xs) acc)
             ((= 0 n) acc)
             default ($ (+: acc (head xs)) (- n 1) (tail xs))))
     (nil> xs) n xs)))

(export drop ^((n xs)
               (case ((nil? xs) xs)
                     ((= 0 n) xs)
                     default ($ (- n 1) (tail xs)))))

(fn map (f xs)
    (case (('unresolved? xs) (stream #(map f (xs))))
          ((nil? xs) (nil> xs))
          default (>+ (f (head xs)) (map f (tail xs)))))

(export map)

(export to-string ^((xs) (fold xs "" +)))

(export fold-right ^((xs init f)
                     (fold xs
                           init
                           ^((acc elem)
                             (f elem acc)))))

(export reverse ^((xs) (fold xs (nil> xs) >+)))

(export split ^((s delim)
                (^((acc buf xs delim)
                   (if (nil? xs)
                       (+< acc buf)
                       (let ((h (head xs))
                             (t (tail xs)))
                            (if (/= h delim)
                                ($ acc (+ buf h) t delim)
                                ($ (+: acc buf) "" t delim)))))
                (seq nil) "" s delim)))

(export compose ^((f g)
                  ^((x) (f (g x)))))

(export fact ^((n)
               (if (> n 1)
                   (* n ($ (- n 1)))
                   1)))

(export reduce ^((xs f) (fold (tail xs) (+< (nil> xs) (head xs)) f)))

(export debug ^((x)
    (do (println x)
        return x)))

(export join ^((xs delim)
               (fold (tail xs)
                     (head xs)
                    ^((acc elem) (format "%s%s%s" [acc delim elem])))))

(fn filter (p xs)
    (case ((nil? xs) (nil> xs))
          (('unresolved? xs) (stream #(filter p (xs))))
          ((p (head xs)) (>+ (head xs) ($ p (tail xs))))
          default ($ p (tail xs))))

(export filter)

(export filter-not ^((p xs)
    (filter ^((x) (not (p x))) xs)))

(export contains ^((chs ch)
                   (if (nil? chs)
                       false
                       (let ((h (head chs))
                             (t (tail chs)))
                            (if (= h ch)
                                true
                                ($ t ch))))))

(export flatten (lambda (xs)
  (if (nil? xs) (nil> xs)
      (let ((h (head xs)))
               (if (seq? h) (++ ($ h) ($ (tail xs)))
                   (++ (seq [h]) ($ (tail xs))))))))

(fn stdin-stream-maker ()
    #('cons (read-char) (stdin-stream-maker)))

(export stdin-stream ^(() (stream (stdin-stream-maker))))

(def eof (char -1))

(fn file-stream-reader (handle)
    #(let ((ch (:get-char handle)))
        (if (= ch eof) (do (:close handle)
                          return 'nil)
            ('cons ch (file-stream-reader handle)))))

(export file-stream ^((filename) (stream (file-stream-reader (read-file filename)))))

(export read-through ^((any-stream)
    (^((acc chs)
       (case ((nil? chs) acc)
             (('unresolved? chs) ($ acc (chs)))
             default (let ((h (head chs)))
                          (if (= h eof) acc
                          ($ (+ acc h) (tail chs))))))
     "" any-stream)))

(export take-while ^((p xs)
    (^((acc p xs)
       (if (nil? xs) (nil> xs)
           (let ((h (head xs)))
                (if (p h) ($ (+: acc h) p (tail xs)) acc))))
     (nil> xs) p xs)))

(export read-line ^((any-stream) (to-string (take-while ^((ch) (/= ch #\Linefeed)) (any-stream)))))

(export n-th ^((xs n)
    (case ((nil? xs) nil)
          ((= n 0) (head xs))
          default ($ (tail xs) (- n 1)))))
